// src/app/api/membership/route.ts
import { NextResponse } from 'next/server';
import { supabase } from '../../../utils/supabaseClient'; // Adjust path if needed

// GET all memberships with pagination
export async function GET(req: Request) {
    try {
        const { searchParams } = new URL(req.url);
        const limit = parseInt(searchParams.get('limit') || '5', 10);
        const offset = parseInt(searchParams.get('offset') || '0', 10);
        const orderBy = searchParams.get('orderBy') || 'm_id'; // Default order by m_id
        const orderDirection = (searchParams.get('orderDirection') || 'asc').toLowerCase() === 'desc' ? false : true;

        // Fetch total count for pagination
        const { count: totalCount, error: countError } = await supabase
            .from('membership')
            .select('*', { count: 'exact', head: true });

        if (countError) {
            console.error('Error fetching membership count:', countError.message);
            return NextResponse.json({ message: 'Failed to fetch membership count', details: countError.message }, { status: 500 });
        }

        // Fetch paginated membership data, including customer details
        const { data: memberships, error: dataError } = await supabase
            .from('membership')
            .select(`
                m_id,
                m_datecreated,
                m_dateexpired,
                m_points,
                customer_c_id,
                customer (c_name) // Fetch customer name for display
            `)
            .order(orderBy, { ascending: orderDirection })
            .range(offset, offset + limit - 1);

        if (dataError) {
            console.error('Error fetching paginated memberships:', dataError.message);
            return NextResponse.json({ message: 'Failed to fetch memberships', details: dataError.message }, { status: 500 });
        }

        return NextResponse.json({
            memberships: memberships,
            totalCount: totalCount
        }, { status: 200 });

    } catch (error: unknown) { // Changed 'any' to 'unknown'
        let errorMessage = 'An unknown error occurred.';
        if (error instanceof Error) { // Type guard
            errorMessage = error.message;
        }
        console.error('Unexpected error fetching memberships:', errorMessage);
        return NextResponse.json({ message: 'Internal Server Error', details: errorMessage }, { status: 500 });
    }
}

// POST: Create a new membership record
export async function POST(req: Request) {
    try {
        const { customer_c_id, m_dateexpired, m_points } = await req.json();

        // Validate input
        if (!customer_c_id || !m_dateexpired || typeof m_points !== 'number' || m_points < 0) {
            return NextResponse.json({ message: 'Missing or invalid required fields: customer_c_id, m_dateexpired (date string), m_points (non-negative number)' }, { status: 400 });
        }

        // Check if customer_c_id already has a membership
        const { data: existingMembership, error: existingMembershipError } = await supabase
            .from('membership')
            .select('m_id')
            .eq('customer_c_id', customer_c_id)
            .single();

        if (existingMembershipError && existingMembershipError.code !== 'PGRST116') { // PGRST116 means "no rows found"
            console.error('Error checking for existing membership:', existingMembershipError.message);
            return NextResponse.json({ message: 'Failed to check for existing membership', details: existingMembershipError.message }, { status: 500 });
        }

        if (existingMembership) {
            return NextResponse.json({ message: `Customer with ID ${customer_c_id} already has an active membership.`, details: 'A customer can only have one membership at a time.' }, { status: 409 });
        }

        // Insert new membership record. m_id is auto-generated by the database.
        const { data, error } = await supabase
            .from('membership')
            .insert([{ customer_c_id, m_dateexpired, m_points }])
            .select();

        if (error) {
            console.error('Error creating membership:', error.message);
            return NextResponse.json({ message: 'Failed to create membership', details: error.message }, { status: 500 });
        }
        return NextResponse.json(data[0], { status: 201 });

    } catch (error: unknown) { // Changed 'any' to 'unknown'
        let errorMessage = 'An unknown error occurred.';
        if (error instanceof Error) { // Type guard
            errorMessage = error.message;
        }
        console.error('Unexpected error creating membership:', errorMessage);
        return NextResponse.json({ message: 'Internal Server Error', details: errorMessage }, { status: 500 });
    }
}

// PUT: Update an existing membership record
export async function PUT(req: Request) {
    try {
        const { m_id, customer_c_id, m_dateexpired, m_points } = await req.json();

        // Validate input
        // Note: m_id is required for update. customer_c_id is kept for consistency but not usually updated for existing membership
        if (!m_id || !customer_c_id || !m_dateexpired || typeof m_points !== 'number' || m_points < 0) {
            return NextResponse.json({ message: 'Missing or invalid required fields for update: m_id, customer_c_id, m_dateexpired (date string), m_points (non-negative number)' }, { status: 400 });
        }

        // Update the membership record in the database
        const { data, error } = await supabase
            .from('membership')
            .update({ m_dateexpired, m_points }) // customer_c_id is not typically updated for an existing membership
            .eq('m_id', m_id)
            .select();

        if (error) {
            console.error('Error updating membership:', error.message);
            return NextResponse.json({ message: 'Failed to update membership', details: error.message }, { status: 500 });
        }
        if (!data || data.length === 0) {
            return NextResponse.json({ message: `Membership with ID ${m_id} not found.` }, { status: 404 });
        }
        return NextResponse.json(data[0], { status: 200 });

    } catch (error: unknown) { // Changed 'any' to 'unknown'
        let errorMessage = 'An unknown error occurred.';
        if (error instanceof Error) { // Type guard
            errorMessage = error.message;
        }
        console.error('Unexpected error updating membership:', errorMessage);
        return NextResponse.json({ message: 'Internal Server Error', details: errorMessage }, { status: 500 });
    }
}

// DELETE: Delete a membership record
export async function DELETE(req: Request) {
    try {
        const { searchParams } = new URL(req.url);
        const m_id = searchParams.get('m_id');

        if (!m_id) {
            return NextResponse.json({ message: 'Membership ID (m_id) is required for deletion' }, { status: 400 });
        }

        // Attempt to delete the membership record
        const { error, count } = await supabase
            .from('membership')
            .delete()
            .eq('m_id', parseInt(m_id, 10)); // m_id is INT, so parse it

        if (error) {
            console.error('Error deleting membership:', error.message);
            return NextResponse.json({ message: 'Failed to delete membership', details: error.message }, { status: 500 });
        }
        if (count === 0) {
            return NextResponse.json({ message: `Membership with ID ${m_id} not found or already deleted.` }, { status: 404 });
        }
        return NextResponse.json({ message: `Membership ${m_id} deleted successfully` }, { status: 200 });

    } catch (error: unknown) { // Changed 'any' to 'unknown'
        let errorMessage = 'An unknown error occurred.';
        if (error instanceof Error) { // Type guard
            errorMessage = error.message;
        }
        console.error('Unexpected error deleting membership:', errorMessage);
        return NextResponse.json({ message: 'Internal Server Error', details: errorMessage }, { status: 500 });
    }
}